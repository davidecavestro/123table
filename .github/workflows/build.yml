name: Build

on:
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:

env:
  TEST_TAG: ${{ github.repository }}:test

jobs:
  build-and-push:
    # permissions:
    #   contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Nested checkout of badges branch
        uses: actions/checkout@v4
        with:
          ref: badges
          path: badges

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Build for tests
        uses: docker/build-push-action@v6
        with:
          context: .
          target: tests
          platforms: linux/amd64
          load: true
          tags: ${{ env.TEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test
        run: |
          chmod a+w target
          docker run --rm -t -e TESTUID=$(id -u) -e TESTGID=0 -v $(pwd)/target:/target ${{ env.TEST_TAG }}
          ls -lha target
          cp -r target/coverage public/
          cp target/tests.html public/ 

      - name: Generate JaCoCo badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: badges
          generate-branches-badge: true
          generate-summary: true
          jacoco-csv-file: "**/coverage.csv"

      - name: Log coverage percentages to workflow output
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"

      # - name: Upload JaCoCo coverage report as a workflow artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: jacoco-report
      #     path: target/coverage/*

      - name: Commit and push the coverage badges and summary file
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd badges
          if [[ `git status --porcelain *.svg *.json` ]]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "GitHub Actions"
            git add *.svg *.json
            git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
            git push
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allow_empty_commit: true
          enable_jekyll: true

      - name: Build and push image
        id: cold_img_build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          target: cold
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}

      - name: Push latest image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: cold
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
          # cache-from: type=registry,ref:${{ steps.cold_img_build.outputs.metadata.ref }}
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build and push slim image
        id: slim_img_build
        uses: docker/build-push-action@v6
        with:
          context: .
          target: slim
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}-slim
          # cache-from: type=registry,ref:${{ steps.cold_img_build.outputs.metadata.ref }}

      - name: Push latest slim image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: slim
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:slim-latest
          # cache-from: type=registry,ref:${{ steps.slim_img_build.outputs.metadata.ref }}
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build and push fast image
        id: fast_img_build
        uses: docker/build-push-action@v6
        with:
          context: .
          target: fast
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}-fast
          # cache-from: type=registry,ref:${{ steps.cold_img_build.outputs.metadata.ref }}

      - name: Push latest fast image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: fast
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:fast-latest
          # cache-from: type=registry,ref:${{ steps.fast_img_build.outputs.metadata.ref }}
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build and push fast-slim image
        id: fastslim_img_build
        uses: docker/build-push-action@v6
        with:
          context: .
          target: fast-slim
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}-fast-slim
          # cache-from: type=registry,ref:${{ steps.cold_img_build.outputs.metadata.ref }}

      - name: Push latest fast-slim image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: fast-slim
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:fast-slim-latest
          # cache-from: type=registry,ref:${{ steps.fastslim_img_build.outputs.metadata.ref }}
        if: startsWith(github.ref, 'refs/tags/')

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: v${{ github.ref_name }}
          body: |
            Container images for this release:
              - Generic: `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`
              - Slim: `ghcr.io/${{ github.repository }}:${{ github.ref_name }}-slim`
              - Fast: `ghcr.io/${{ github.repository }}:${{ github.ref_name }}-fast`
              - Fast and slim: `ghcr.io/${{ github.repository }}:${{ github.ref_name }}-fast-slim`
            ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: false

      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: 'docs: update CHANGELOG.md for ${{ github.ref_name }} [skip ci]'
          file_pattern: CHANGELOG.md
